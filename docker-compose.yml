version: '3.0'

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/etc/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  zookeeper:
    image: confluentinc/cp-zookeeper:4.0.0
    ports:
      - "32181:32181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:4.0.0
    ports:
      - "29092:29092"
      - "49999:49999"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29093, CLIENT://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CLIENT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 49999
      KAFKA_JMX_HOSTNAME: localhost

#  rest-proxy:
#    image: confluentinc/cp-kafka-rest:3.3.0
#    hostname: kafka-rest-proxy
#    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#    ports:
#      - "8082:8082"
#    environment:
#      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:32181
#      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
#      RP_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
# network_mode: "host"

  schema-registry:
    image: confluentinc/cp-schema-registry:4.0.0
    ports:
      - "8081:8081"
    links:
      - kafka
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:32181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./docker/config.monitoring

  vault-config:
    build: docker/vault

  vault:
    image: vault:latest
    ports:
      - "8200:8200"
    entrypoint:  /usr/bin/dumb-init /bin/sh /usr/local/bin/docker-entrypoint.sh server -dev
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_MODE: "true"
      VAULT_DEV_ROOT_TOKEN_ID: DevelopmentVault
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: "http://127.0.0.1:8200"

